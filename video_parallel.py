from TikTokApi import TikTokApi
import asyncio
import os
from glob import glob
import logging
import time

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

ms_token = "OosMHDsuRy3tqoM5W18QBtLYIZwVL9aqVduIkA5vyxu7F8eHh6d-L8M_zeqlwnOxL0muV-ScTZ_cNQux_Qjks_7tEu8f-he_pUE92eu9hZrlMXqfqwrt-rwrNqIRHZvX8upblOeZcFfLfj2NBKdVqD6ffg=="

# ƒê·ªçc danh s√°ch video IDs
lst = glob("resources/channel_video/*.txt")
result = []
for i in lst:
    name = i.split("/")[-1][:-4]
    video_ids = open(i, "r").read().splitlines()
    for video_id in video_ids:
        result.append((name, video_id))
result = result[0:10]

async def download_video_with_retry(api, channel_name, video_id, max_retries=3):
    """T·∫£i xu·ªëng m·ªôt video v·ªõi retry mechanism"""
    for attempt in range(max_retries):
        try:
            video_url = f"https://www.tiktok.com/@{channel_name}/video/{video_id}"
            video = api.video(url=video_url)
            
            logger.info(f"Attempt {attempt + 1}: ƒêang t·∫£i {channel_name}/{video_id}")
            
            # Th√™m timeout cho info()
            video_info = await asyncio.wait_for(video.info(), timeout=30)
            
            # Ki·ªÉm tra xem video c√≥ t·ªìn t·∫°i kh√¥ng
            if not video_info or 'video' not in video_info:
                logger.error(f"Video kh√¥ng t·ªìn t·∫°i ho·∫∑c b·ªã private: {video_id}")
                return False
                
            # Th√™m timeout cho bytes()
            video_bytes = await asyncio.wait_for(video.bytes(), timeout=60)
            
            # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
            os.makedirs(f"downloads/{channel_name}", exist_ok=True)
            
            # L∆∞u file
            filename = f"downloads/{channel_name}/{video_id}.mp4"
            with open(filename, "wb") as f:
                f.write(video_bytes)
            
            logger.info(f"‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng: {filename}")
            return True
            
        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ Timeout khi t·∫£i {video_id} (attempt {attempt + 1})")
            if attempt < max_retries - 1:
                await asyncio.sleep(5 * (attempt + 1))  # Exponential backoff
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi t·∫£i {video_id} (attempt {attempt + 1}): {str(e)}")
            if attempt < max_retries - 1:
                # TƒÉng th·ªùi gian ch·ªù theo rate limiting guidelines
                await asyncio.sleep(10 * (attempt + 1))
            
    logger.error(f"‚ùå Th·∫•t b·∫°i ho√†n to√†n: {channel_name}/{video_id}")
    return False

async def download_videos_sequential():
    """T·∫£i xu·ªëng video tu·∫ßn t·ª± ƒë·ªÉ tr√°nh rate limiting"""
    async with TikTokApi() as api:
        await api.create_sessions(
            ms_tokens=[ms_token], 
            num_sessions=2,  # Gi·∫£m s·ªë sessions
            sleep_after=5,   # TƒÉng th·ªùi gian ch·ªù
            browser=os.getenv("TIKTOK_BROWSER", "chromium"),
            headless=True
        )
        
        success_count = 0
        fail_count = 0
        
        for i, (channel_name, video_id) in enumerate(result):
            logger.info(f"\nüìπ Video {i+1}/{len(result)}: {channel_name}/{video_id}")
            
            # Ki·ªÉm tra file ƒë√£ t·ªìn t·∫°i ch∆∞a
            filename = f"downloads/{channel_name}/{video_id}.mp4"
            if os.path.exists(filename):
                logger.info(f"‚è≠Ô∏è  File ƒë√£ t·ªìn t·∫°i, b·ªè qua: {filename}")
                continue
            
            success = await download_video_with_retry(api, channel_name, video_id)
            
            if success:
                success_count += 1
            else:
                fail_count += 1
            
            # Rate limiting: ch·ªù gi·ªØa c√°c requests
            if i < len(result) - 1:  # Kh√¥ng ch·ªù ·ªü video cu·ªëi
                wait_time = 3  # Ch·ªù 3 gi√¢y gi·ªØa c√°c video
                logger.info(f"‚è≥ Ch·ªù {wait_time}s tr∆∞·ªõc video ti·∫øp theo...")
                await asyncio.sleep(wait_time)
        
        logger.info(f"\nüìä K·∫øt qu·∫£: ‚úÖ {success_count} th√†nh c√¥ng, ‚ùå {fail_count} th·∫•t b·∫°i")

async def download_videos_batch_improved():
    """Phi√™n b·∫£n batch c·∫£i ti·∫øn v·ªõi rate limiting"""
    async with TikTokApi() as api:
        await api.create_sessions(
            ms_tokens=[ms_token], 
            num_sessions=3,
            sleep_after=5,
            browser=os.getenv("TIKTOK_BROWSER", "chromium"),
            headless=True
        )
        
        batch_size = 3  # Gi·∫£m batch size
        total_videos = len(result)
        success_count = 0
        fail_count = 0
        
        for i in range(0, total_videos, batch_size):
            batch = result[i:i + batch_size]
            batch_num = i // batch_size + 1
            
            logger.info(f"\nüîÑ Batch {batch_num}: T·∫£i {len(batch)} video ({i+1}-{min(i+batch_size, total_videos)}/{total_videos})")
            
            # T·∫°o semaphore ƒë·ªÉ gi·ªõi h·∫°n concurrent requests
            semaphore = asyncio.Semaphore(2)  # Ch·ªâ 2 requests ƒë·ªìng th·ªùi
            
            async def download_with_semaphore(channel_name, video_id):
                async with semaphore:
                    return await download_video_with_retry(api, channel_name, video_id)
            
            # Ch·∫°y batch v·ªõi semaphore
            tasks = [download_with_semaphore(channel_name, video_id) 
                    for channel_name, video_id in batch]
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # ƒê·∫øm k·∫øt qu·∫£
            for result in results:
                if result is True:
                    success_count += 1
                else:
                    fail_count += 1
            
            logger.info(f"‚úÖ Ho√†n th√†nh batch {batch_num}")
            
            # Ch·ªù gi·ªØa c√°c batch ƒë·ªÉ tr√°nh rate limiting
            if i + batch_size < total_videos:
                wait_time = 15  # Ch·ªù 15 gi√¢y gi·ªØa c√°c batch
                logger.info(f"‚è≥ Ch·ªù {wait_time}s tr∆∞·ªõc batch ti·∫øp theo...")
                await asyncio.sleep(wait_time)
        
        logger.info(f"\nüìä T·ªïng k·∫øt: ‚úÖ {success_count} th√†nh c√¥ng, ‚ùå {fail_count} th·∫•t b·∫°i")

if __name__ == "__main__":
    # Ch·ªçn m·ªôt trong hai ph∆∞∆°ng ph√°p:
    
    # Ph∆∞∆°ng ph√°p 1: T·∫£i tu·∫ßn t·ª± (an to√†n h∆°n)
    asyncio.run(download_videos_sequential())
    
    # Ph∆∞∆°ng ph√°p 2: T·∫£i batch c·∫£i ti·∫øn (nhanh h∆°n nh∆∞ng riskier)
    # asyncio.run(download_videos_batch_improved())
